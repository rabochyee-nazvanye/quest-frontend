import React, { Component } from 'react'
import {Button, Col, Row, Steps, Typography, Divider, Spin} from 'antd'
import './QuestDescription.css'
import { Table, Tag } from 'antd';
import { TrophyOutlined } from '@ant-design/icons';
import {getToken} from "../../redux/Actions/Api";
import {BASE_URL} from "../../settings";
import {Link} from "react-router-dom";
import QuestCard from "../QuestCard/QuestCard";
import ReactMarkdown from 'react-markdown'
const columns = [
    {
        title: '',
        dataIndex: 'pin',
        width: 5,
    },
    {
        title: '',
        dataIndex: 'place',
        width: 5,
    },
    {
        title: '',
        dataIndex: 'name',
    },
    {
        title: '',
        dataIndex: 'score',
        width: 5,
    },
];


const svgRes = <svg width="170" height="32" viewBox="0 0 217 36" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M0.725852 28H5.73224V18.6619H11.022C17.4048 18.6619 20.8324 14.8295 20.8324 9.51278C20.8324 4.23651 17.4453 0.363636 11.0895 0.363636H0.725852V28ZM5.73224 14.5462V4.54688H10.3203C14.0717 4.54688 15.7315 6.57102 15.7315 9.51278C15.7315 12.4545 14.0717 14.5462 10.3473 14.5462H5.73224ZM33.8443 28.4048C38.6752 28.4048 41.9949 26.0433 42.8585 22.4403L38.2974 21.9276C37.6362 23.6818 36.0169 24.5994 33.9118 24.5994C30.7541 24.5994 28.6625 22.5213 28.622 18.9723H43.0609V17.4744C43.0609 10.201 38.6887 7.00284 33.5879 7.00284C27.6504 7.00284 23.7775 11.3615 23.7775 17.7578C23.7775 24.2621 27.5964 28.4048 33.8443 28.4048ZM28.6355 15.6797C28.7839 13.0348 30.7406 10.8082 33.6554 10.8082C36.4622 10.8082 38.3514 12.8594 38.3784 15.6797H28.6355ZM46.0465 22.3189C46.168 26.1648 49.69 28.4048 54.4805 28.4048C59.3924 28.4048 62.9414 26.0703 62.9414 22.2514C62.9414 19.4581 61.0387 17.5419 58.5827 17.3935V17.1776C60.9577 16.5433 62.4691 15.0589 62.4691 12.8189C62.4691 9.32386 59.4464 7.00284 54.5884 7.00284C50.0543 7.00284 46.6403 9.35085 46.5728 12.9673H51.3903C51.4442 11.5774 52.8746 10.6058 54.8178 10.6058C56.761 10.6058 57.935 11.6449 57.935 13.1832C57.935 14.6001 56.8555 15.6527 54.8313 15.6527H51.6602V19.1207H54.8313C56.869 19.1207 58.2049 20.2678 58.2049 21.9411C58.2049 23.8303 56.5451 24.7479 54.4535 24.7479C52.3888 24.7479 50.9854 23.8572 50.891 22.3189H46.0465ZM69.8235 35.7322C73.6289 35.7322 75.8285 33.7621 77.0025 30.5099L85.3285 7.29972L80.1062 7.27273L75.3157 22.9261H75.0998L70.3228 7.27273H65.141L72.6573 28.4318L72.239 29.5518C71.3079 31.8459 69.9045 32.0213 67.7724 31.4141L66.6388 35.206C67.3001 35.4893 68.4876 35.7322 69.8235 35.7322ZM85.6186 28H87.13C91.5831 28 93.5938 24.8693 93.9176 17.9602L94.2415 11.2805H100.192V28H104.915V7.27273H89.8018L89.4375 16.4489C89.2081 22.2649 88.4524 23.9787 86.3068 23.9787H85.5916L85.6186 28ZM114.544 14.0199V7.27273H109.834V28H119.253C124.529 28 127.566 25.0852 127.579 21.0099C127.566 16.8267 124.529 14.0199 119.253 14.0199H114.544ZM114.544 18.0277H119.253C121.372 18.0277 122.897 19.2827 122.897 21.0774C122.897 22.7912 121.372 23.9922 119.253 23.9922H114.544V18.0277ZM128.48 11.2805H135.187V28H139.91V11.2805H146.616V7.27273H128.48V11.2805ZM155.617 28.4183C158.869 28.4183 160.812 26.8935 161.703 25.1527H161.865V28H166.561V14.1278C166.561 8.64915 162.094 7.00284 158.14 7.00284C153.782 7.00284 150.435 8.94602 149.356 12.7244L153.917 13.3722C154.403 11.9553 155.779 10.7408 158.167 10.7408C160.434 10.7408 161.676 11.9013 161.676 13.9389V14.0199C161.676 15.4233 160.205 15.4908 156.548 15.8821C152.527 16.3139 148.681 17.5149 148.681 22.1839C148.681 26.2592 151.663 28.4183 155.617 28.4183ZM156.885 24.8288C154.848 24.8288 153.39 23.8977 153.39 22.103C153.39 20.2273 155.023 19.4446 157.209 19.1342C158.491 18.9588 161.055 18.6349 161.689 18.1222V20.5646C161.689 22.8722 159.827 24.8288 156.885 24.8288ZM169.152 11.2805H175.858V28H180.581V11.2805H187.288V7.27273H169.152V11.2805ZM195.887 14.0199V7.27273H191.178V28H200.597C205.873 28 208.909 25.0852 208.923 21.0099C208.909 16.8267 205.873 14.0199 200.597 14.0199H195.887ZM211.5 28H216.385V7.27273H211.5V28ZM195.887 18.0277H200.597C202.716 18.0277 204.24 19.2827 204.24 21.0774C204.24 22.7912 202.716 23.9922 200.597 23.9922H195.887V18.0277Z" fill="black"/>
</svg>;

class GuestDescription extends Component {
    constructor (props) {
        super(props);
        this.state = {
            quest: null,
            dataReady: false,
            results: []

        }
    }

    componentDidMount () {
        console.log(this.props);
        const id= this.props.match.params.id;
        const token = getToken();
        fetch(BASE_URL + '/quests/' + id + '/scoreboard',
            {
                method: 'GET',
                headers: {
                    'Authorization': 'bearer ' + token,
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(readResponse => this.setState({ dataReady: true, results: readResponse}))}



    mapResults () {
        const a = this.state.results.map((r) => r['pin'] = this.getPin(r.place));
        return a.map((r) => r.place = r.place+1);
    }

    getPin(props){
        if (props === 0)
            return <div style={{"color": "#FA8C16"}}> <TrophyOutlined/></div>;
        if (props === 1)
            return <div style={{"color": "#595959"}}> <TrophyOutlined/></div>;
        if (props ===2)
            return <div style={{"color": "#5C0011"}}> <TrophyOutlined/></div>;
        else return ''
    }

    getRepresentationByState () {
        if (!this.state.dataReady) {
            return <Spin />
        } else {
            if (this.state.quest.status !== 'resultsavailable') {
                return (
                    <React.Fragment>
                        <p>
                            <p>&nbsp;</p>
                            <Divider/>
                            <div className={'about'}>
                                <svg width="190" height="26" viewBox="0 0 190 36" fill="none"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <path
                                        d="M22.6792 0.363636H0.656428V28H5.62234V4.51989H17.7132V28H22.6792V0.363636ZM28.4513 35.7727H33.3363V24.7344H33.5387C34.3079 26.2457 35.9137 28.3643 39.4762 28.3643C44.3612 28.3643 48.0181 24.4915 48.0181 17.6634C48.0181 10.7543 44.2532 7.00284 39.4627 7.00284C35.8058 7.00284 34.2809 9.20241 33.5387 10.7003H33.2553V7.27273H28.4513V35.7727ZM33.2418 17.6364C33.2418 13.6151 34.9691 11.0107 38.1133 11.0107C41.3654 11.0107 43.0387 13.777 43.0387 17.6364C43.0387 21.5227 41.3384 24.3565 38.1133 24.3565C34.9961 24.3565 33.2418 21.6577 33.2418 17.6364ZM61.2425 28.4048C67.315 28.4048 71.1744 24.1271 71.1744 17.7173C71.1744 11.294 67.315 7.00284 61.2425 7.00284C55.1701 7.00284 51.3107 11.294 51.3107 17.7173C51.3107 24.1271 55.1701 28.4048 61.2425 28.4048ZM61.2695 24.4915C57.9094 24.4915 56.2631 21.4957 56.2631 17.7038C56.2631 13.9119 57.9094 10.8757 61.2695 10.8757C64.5756 10.8757 66.2219 13.9119 66.2219 17.7038C66.2219 21.4957 64.5756 24.4915 61.2695 24.4915ZM84.7463 28H89.6312V20.1868H92.0197L97.7008 28H103.611L95.8521 17.4474L103.53 7.27273H97.6468L91.4125 15.6392H89.6312V7.27273H84.7463V28ZM106.381 28H116.421C121.279 28 124.059 25.8004 124.059 22.3729C124.059 19.4716 121.805 17.4474 118.553 17.1641C121.319 16.6513 123.047 15.1804 123.047 12.8459C123.047 9.35085 119.983 7.27273 115.085 7.27273H106.381V28ZM110.956 24.1541V19.0128H116.421C118.216 19.0128 119.309 20.0518 119.309 21.7656C119.309 23.25 118.216 24.1541 116.421 24.1541H110.956ZM110.956 15.8551V11.1861H115.085C117.123 11.1861 118.364 12.0497 118.364 13.4666C118.364 14.951 117.163 15.8551 115.179 15.8551H110.956ZM137.266 28.4048C142.097 28.4048 145.417 26.0433 146.28 22.4403L141.719 21.9276C141.058 23.6818 139.439 24.5994 137.334 24.5994C134.176 24.5994 132.084 22.5213 132.044 18.9723H146.483V17.4744C146.483 10.201 142.111 7.00284 137.01 7.00284C131.072 7.00284 127.199 11.3615 127.199 17.7578C127.199 24.2621 131.018 28.4048 137.266 28.4048ZM132.057 15.6797C132.206 13.0348 134.162 10.8082 137.077 10.8082C139.884 10.8082 141.773 12.8594 141.8 15.6797H132.057ZM159.657 28.4048C164.865 28.4048 168.185 25.3146 168.536 20.9155H163.867C163.449 23.142 161.843 24.424 159.697 24.424C156.647 24.424 154.677 21.8736 154.677 17.6364C154.677 13.4531 156.688 10.9432 159.697 10.9432C162.045 10.9432 163.489 12.4545 163.867 14.4517H168.536C168.199 9.9581 164.69 7.00284 159.63 7.00284C153.557 7.00284 149.725 11.3885 149.725 17.7173C149.725 23.9922 153.463 28.4048 159.657 28.4048ZM171.08 11.2805H177.786V28H182.509V11.2805H189.216V7.27273H171.08V11.2805Z"
                                        fill="black"/>
                                </svg>
                                <h3>
                                    <div className={'quest-descript'}>
                                        <ReactMarkdown source={this.state.quest.description}/>
                                    </div>
                                </h3>
                            </div>
                        </p>

                    </React.Fragment>
                )
            } else {
                let commonCol = this.mapResults();
                const size = commonCol.length;
                const res = commonCol.reduce((p,c)=>{
                    if(p[p.length-1].length === size){
                        p.push([]);
                    }

                    p[p.length-1].push(c);
                    return p;
                }, [[]]);
                let col1 = res[0];
                let col2 = res[1];
                return (
                    <React.Fragment>
                        <p>&nbsp;</p>
                        <Divider/>
                        {svgRes}
                        <p>В таблице указана разность количества баллов команды и баллов первого места</p>
                        <p>&nbsp;</p>
                        <Row>
                            <Col span={11}>
                                <div>
                                    <Table
                                        columns={col1}
                                        dataSource={this.state.results}
                                        pagination={false}
                                        showHeader={false}
                                    />
                                </div>
                            </Col>
                            <div>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</div>
                            <Col span={11}>
                                <div>
                                    <Table
                                        columns={col2}
                                        dataSource={this.state.results}
                                        pagination={false}
                                        showHeader={false}
                                    />
                                </div>
                            </Col>
                        </Row>
                    </React.Fragment>)
            }
        }
    }

    render () {
        return (
            <React.Fragment>
                {this.getRepresentationByState()}
            </React.Fragment>)
    }
}

export default GuestDescription
